 ===============================================
SimplePHP框架网站导航问题排查与解决日志
===============================================
日期：2025年4月4日
操作人员：系统管理员
问题概述：网站导航链接（如https://127.0.0.1/api）返回"404 Not Found nginx"错误

----------------------------------------------
[22:32] - 问题发现与初步分析
----------------------------------------------
* 现象描述：
  - 点击网站相应的导航链接（例如https://127.0.0.1/api）无法导航到正确页面
  - 错误提示："404 Not Found nginx"
  - 首次怀疑是路由设计问题，经过多轮路由重写设计仍无法解决

* 初步分析：
  - 错误信息中包含"nginx"表明是Nginx服务器返回的错误，而非PHP应用内部错误
  - 可能是PHP路由逻辑无法正确执行或Nginx配置问题
  - 决定深入排查服务器配置

----------------------------------------------
[22:45] - PHP环境检查
----------------------------------------------
* 检查PHP-CGI进程：
  - 执行`tasklist | findstr php`
  - 结果发现多个PHP-CGI实例正在运行：
    php-cgi.exe                  18712 Services                   0     23,404 K
    php-cgi.exe                   3712 Services                   0     20,300 K
    php-cgi.exe                   9480 Services                   0     20,316 K
    php-cgi.exe                  20244 Services                   0     20,340 K
    php-cgi.exe                  21008 Console                    1     20,464 K

* 检查监听端口：
  - 执行`netstat -ano | findstr "LISTENING"`
  - 查看所有监听端口，未发现标准PHP-FPM端口9000在监听

* PHP-CGI启动测试：
  - 尝试手动启动php-cgi：`php-cgi.exe -b 127.0.0.1:9000`
  - 遇到错误："无法将php-cgi.exe项识别为cmdlet、函数、脚本文件或可运行程序的名称"
  - 确认PHP-CGI位置：`D:\BtSoft\php\74\php-cgi.exe`
  - 使用完整路径启动：`D:\BtSoft\php\74\php-cgi.exe -b 127.0.0.1:9000`
  - 成功启动PHP-CGI服务

* 确认端口监听状态：
  - 执行`netstat -ano | findstr "9000"`
  - 确认端口已监听：TCP 127.0.0.1:9000 0.0.0.0:0 LISTENING 17208

----------------------------------------------
[23:05] - Nginx配置分析
----------------------------------------------
* 检查Nginx主配置：
  - 分析http配置块中的server_names_hash_bucket_size、client配置等
  - 确认配置文件结尾包含`include vhost/*.conf;`引用外部虚拟主机配置

* 检查站点配置：
  - 分析站点配置文件，确认根目录设置为`E:/SimplePHP/public`
  - 发现配置中包含多个include指令：
    * include php/74.conf;
    * include rewrite/127.0.0.1/*.conf;
    * include redirect/127.0.0.1/*.conf;
  - SSL设置正确，强制HTTP转HTTPS

* 关键问题发现：
  - 缺少处理URL重写的location块
  - 未配置try_files指令将请求路由到index.php

----------------------------------------------
[23:15] - 解决方案尝试1：创建重写规则文件
----------------------------------------------
* 创建重写规则文件：
  - 路径：`D:\BtSoft\nginx\conf\rewrite\127.0.0.1\simplephp.conf`
  - 内容：
    ```
    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }
    ```
  - 重载Nginx配置：`D:\BtSoft\nginx\nginx.exe -s reload`
  - 结果：仍然返回404错误

* 测试文件访问：
  - 创建测试PHP文件：`E:\SimplePHP\public\test.php`
  - 访问`https://127.0.0.1/test.php`成功
  - 确认问题不在PHP执行，而在URL重写规则不生效

----------------------------------------------
[23:25] - 解决方案尝试2：创建独立vhost配置
----------------------------------------------
* 创建独立虚拟主机配置：
  - 路径：`D:\BtSoft\nginx\conf\vhost\simplephp.conf`
  - 监听8090端口避免与默认站点冲突
  - 包含完整的路由重写规则和PHP处理配置
  - 重载Nginx配置
  - 结果：无法解决原站点问题，因为用户仍访问默认的443端口

----------------------------------------------
[23:35] - 最终解决方案：修改主站点配置
----------------------------------------------
* 直接修改站点配置文件：
  - 在server块内直接添加路由重写规则和PHP处理配置
  - 配置内容：
    ```
    # SimplePHP框架路由重写规则
    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    # 确保PATH_INFO正确传递
    location ~ [^/]\.php(/|$) {
        try_files $uri =404;
        fastcgi_pass 127.0.0.1:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        include fastcgi_params;
    }
    ```
  - 重载Nginx配置：`D:\BtSoft\nginx\nginx.exe -s reload`

* 测试结果：
  - 访问`https://127.0.0.1/api`成功
  - 所有路由链接正常工作
  - 问题彻底解决

----------------------------------------------
[23:45] - 问题总结与经验教训
----------------------------------------------
* 根本原因：
  - Nginx配置中缺少处理URL重写的location块
  - PHP-CGI运行正常但路由请求未被正确转发到PHP处理器

* 关键解决点：
  1. 添加try_files指令将非静态文件请求路由到index.php
  2. 确保fastcgi_split_path_info正确配置，处理PATH_INFO参数
  3. 在正确的配置文件中添加规则（宝塔面板配置结构特殊）

* 经验教训：
  1. 宝塔面板对Nginx配置有特殊组织结构，修改需了解其include机制
  2. 404错误排查应首先确认是服务器层面还是应用层面的问题
  3. 在复杂的服务器环境中，有时直接修改主配置比使用分离的配置文件更有效
  4. PHP处理和URL重写是两个独立问题，需分别确认

* 预防措施：
  1. 在部署新框架应用时，提前检查Nginx配置是否支持该框架的URL路由需求
  2. 创建标准化的Nginx配置模板，用于不同框架的快速部署
  3. 定期检查PHP-CGI/FPM服务状态，确保正常运行
  4. 为关键站点配置添加注释，标明配置作用，避免日后修改引起问题

===============================================
注：此问题已完全解决，网站导航功能恢复正常。
同时记录在案，供日后参考。
===============================================